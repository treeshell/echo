/*
 * This file is generated by jOOQ.
 */
package cn.treeshell.echo.model.entity.tables;


import cn.treeshell.echo.model.entity.Echo;
import cn.treeshell.echo.model.entity.Indexes;
import cn.treeshell.echo.model.entity.Keys;
import cn.treeshell.echo.model.entity.tables.records.ArticleLikeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户点赞文章表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleLike extends TableImpl<ArticleLikeRecord> {

    private static final long serialVersionUID = -803683628;

    /**
     * The reference instance of <code>echo.article_like</code>
     */
    public static final ArticleLike ARTICLE_LIKE = new ArticleLike();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleLikeRecord> getRecordType() {
        return ArticleLikeRecord.class;
    }

    /**
     * The column <code>echo.article_like.id</code>. id
     */
    public final TableField<ArticleLikeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "id");

    /**
     * The column <code>echo.article_like.article_id</code>. 文章id
     */
    public final TableField<ArticleLikeRecord, Integer> ARTICLE_ID = createField(DSL.name("article_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "文章id");

    /**
     * The column <code>echo.article_like.user_id</code>. 用户id
     */
    public final TableField<ArticleLikeRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "用户id");

    /**
     * The column <code>echo.article_like.publisher_id</code>. 发布文章用户id
     */
    public final TableField<ArticleLikeRecord, Integer> PUBLISHER_ID = createField(DSL.name("publisher_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "发布文章用户id");

    /**
     * The column <code>echo.article_like.active</code>. 0：未删除，1：已删除
     */
    public final TableField<ArticleLikeRecord, Byte> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0：未删除，1：已删除");

    /**
     * The column <code>echo.article_like.create_time</code>. 创建日期
     */
    public final TableField<ArticleLikeRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建日期");

    /**
     * The column <code>echo.article_like.update_time</code>. 修改日期
     */
    public final TableField<ArticleLikeRecord, Timestamp> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改日期");

    /**
     * Create a <code>echo.article_like</code> table reference
     */
    public ArticleLike() {
        this(DSL.name("article_like"), null);
    }

    /**
     * Create an aliased <code>echo.article_like</code> table reference
     */
    public ArticleLike(String alias) {
        this(DSL.name(alias), ARTICLE_LIKE);
    }

    /**
     * Create an aliased <code>echo.article_like</code> table reference
     */
    public ArticleLike(Name alias) {
        this(alias, ARTICLE_LIKE);
    }

    private ArticleLike(Name alias, Table<ArticleLikeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticleLike(Name alias, Table<ArticleLikeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户点赞文章表"));
    }

    public <O extends Record> ArticleLike(Table<O> child, ForeignKey<O, ArticleLikeRecord> key) {
        super(child, key, ARTICLE_LIKE);
    }

    @Override
    public Schema getSchema() {
        return Echo.ECHO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLE_LIKE_PRIMARY);
    }

    @Override
    public Identity<ArticleLikeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTICLE_LIKE;
    }

    @Override
    public UniqueKey<ArticleLikeRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_LIKE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ArticleLikeRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleLikeRecord>>asList(Keys.KEY_ARTICLE_LIKE_PRIMARY);
    }

    @Override
    public ArticleLike as(String alias) {
        return new ArticleLike(DSL.name(alias), this);
    }

    @Override
    public ArticleLike as(Name alias) {
        return new ArticleLike(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleLike rename(String name) {
        return new ArticleLike(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleLike rename(Name name) {
        return new ArticleLike(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, Integer, Byte, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
