/*
 * This file is generated by jOOQ.
 */
package cn.treeshell.echo.model.entity.tables;


import cn.treeshell.echo.model.entity.Echo;
import cn.treeshell.echo.model.entity.Indexes;
import cn.treeshell.echo.model.entity.Keys;
import cn.treeshell.echo.model.entity.tables.records.CommentLikeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户点赞评论表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentLike extends TableImpl<CommentLikeRecord> {

    private static final long serialVersionUID = -547442668;

    /**
     * The reference instance of <code>echo.comment_like</code>
     */
    public static final CommentLike COMMENT_LIKE = new CommentLike();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentLikeRecord> getRecordType() {
        return CommentLikeRecord.class;
    }

    /**
     * The column <code>echo.comment_like.id</code>. id
     */
    public final TableField<CommentLikeRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "id");

    /**
     * The column <code>echo.comment_like.comment_id</code>. 评论id
     */
    public final TableField<CommentLikeRecord, Integer> COMMENT_ID = createField(DSL.name("comment_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "评论id");

    /**
     * The column <code>echo.comment_like.user_id</code>. 收藏用户id
     */
    public final TableField<CommentLikeRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "收藏用户id");

    /**
     * The column <code>echo.comment_like.publisher_id</code>. 发布评论用户id
     */
    public final TableField<CommentLikeRecord, Integer> PUBLISHER_ID = createField(DSL.name("publisher_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "发布评论用户id");

    /**
     * The column <code>echo.comment_like.active</code>. 0：未删除，1：已删除
     */
    public final TableField<CommentLikeRecord, Byte> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0：未删除，1：已删除");

    /**
     * The column <code>echo.comment_like.create_time</code>. 创建日期
     */
    public final TableField<CommentLikeRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "创建日期");

    /**
     * The column <code>echo.comment_like.update_time</code>. 修改日期
     */
    public final TableField<CommentLikeRecord, Timestamp> UPDATE_TIME = createField(DSL.name("update_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "修改日期");

    /**
     * Create a <code>echo.comment_like</code> table reference
     */
    public CommentLike() {
        this(DSL.name("comment_like"), null);
    }

    /**
     * Create an aliased <code>echo.comment_like</code> table reference
     */
    public CommentLike(String alias) {
        this(DSL.name(alias), COMMENT_LIKE);
    }

    /**
     * Create an aliased <code>echo.comment_like</code> table reference
     */
    public CommentLike(Name alias) {
        this(alias, COMMENT_LIKE);
    }

    private CommentLike(Name alias, Table<CommentLikeRecord> aliased) {
        this(alias, aliased, null);
    }

    private CommentLike(Name alias, Table<CommentLikeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户点赞评论表"));
    }

    public <O extends Record> CommentLike(Table<O> child, ForeignKey<O, CommentLikeRecord> key) {
        super(child, key, COMMENT_LIKE);
    }

    @Override
    public Schema getSchema() {
        return Echo.ECHO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_LIKE_PRIMARY);
    }

    @Override
    public Identity<CommentLikeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMENT_LIKE;
    }

    @Override
    public UniqueKey<CommentLikeRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_LIKE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CommentLikeRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentLikeRecord>>asList(Keys.KEY_COMMENT_LIKE_PRIMARY);
    }

    @Override
    public CommentLike as(String alias) {
        return new CommentLike(DSL.name(alias), this);
    }

    @Override
    public CommentLike as(Name alias) {
        return new CommentLike(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentLike rename(String name) {
        return new CommentLike(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CommentLike rename(Name name) {
        return new CommentLike(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, Integer, Byte, Timestamp, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
